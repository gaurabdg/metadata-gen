<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="CustomImportOrderCheck" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Checks that the groups of import declarations appear in the order specified
 by the user. If there is an import but its group is not specified in the
 configuration such an import should be placed at the end of the import list.
 </p><p>
 The rule consists of:
 </p><p>
 Use the separator '###' between rules.
 </p><p>
 To set RegExps for THIRD_PARTY_PACKAGE and STANDARD_JAVA_PACKAGE groups use
 thirdPartyPackageRegExp and standardPackageRegExp options.
 </p><p>
 Pretty often one import can match more than one group. For example, static import from standard
 package or regular expressions are configured to allow one import match multiple groups.
 In this case, group will be assigned according to priorities:
 </p><p>
 Few examples to illustrate "best match":
 </p><p>
 1. patterns STANDARD_JAVA_PACKAGE = "Check", SPECIAL_IMPORTS="ImportOrderCheck" and input file:
 </p><p>
 Result: imports will be assigned to SPECIAL_IMPORTS, because matching substring length is 16.
 Matching substring for STANDARD_JAVA_PACKAGE is 5.
 </p><p>
 2. patterns STANDARD_JAVA_PACKAGE = "Check", SPECIAL_IMPORTS="Avoid" and file:
 </p><p>
 Result: import will be assigned to SPECIAL_IMPORTS. Matching substring length is 5 for both
 patterns. However, "Avoid" position is lower than "Check" position.
 </p>]]></description>
      <properties>
        <property name="customImportOrderRules" type="java.lang.String" default-value="">
          <description><![CDATA[Specify format of order declaration
 customizing by user.]]></description>
        </property>
        <property name="standardPackageRegExp" type="java.util.regex.Pattern" default-value="^(java|javax)\.">
          <description><![CDATA[Specify RegExp for STANDARD_JAVA_PACKAGE group imports.]]></description>
        </property>
        <property name="thirdPartyPackageRegExp" type="java.util.regex.Pattern" default-value=".*">
          <description><![CDATA[Specify RegExp for THIRD_PARTY_PACKAGE group imports.]]></description>
        </property>
        <property name="specialImportsRegExp" type="java.util.regex.Pattern" default-value="^$ (empty)">
          <description><![CDATA[Specify RegExp for SPECIAL_IMPORTS group imports.]]></description>
        </property>
        <property name="separateLineBetweenGroups" type="boolean" default-value="true">
          <description><![CDATA[Force empty line separator between
 import groups.]]></description>
        </property>
        <property name="sortImportsInGroupAlphabetically" type="boolean" default-value="false">
          <description><![CDATA[Force grouping alphabetically,
 in <a href="https://en.wikipedia.org/wiki/ASCII#Order">ASCII sort order</a>.]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="custom.import.order"/>
        <message-key key="custom.import.order.lex"/>
        <message-key key="custom.import.order.line.separator"/>
        <message-key key="custom.import.order.nonGroup.expected"/>
        <message-key key="custom.import.order.nonGroup.import"/>
        <message-key key="custom.import.order.separated.internally"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
