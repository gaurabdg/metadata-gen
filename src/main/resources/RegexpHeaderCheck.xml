<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="RegexpHeaderCheck" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck" parent="com.puppycrawl.tools.checkstyle.Checker">
      <description><![CDATA[<p>
 Checks the header of a source file against a header that contains a
 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html">
 regular expression</a> for each line of the source header.
 </p><p>
 Rationale: In some projects <a href="https://checkstyle.org/config_header.html#Header">
 checking against a fixed header</a> is not sufficient, e.g. the header might
 require a copyright line where the year information is not static.
 </p><p>
 For example, consider the following header:
 </p><p>
 Lines 1 and 6 demonstrate a more compact notation for 71 '/' characters.
 Line 4 enforces that the copyright notice includes a four digit year.
 Line 5 is an example how to enforce revision control keywords in a file header.
 Lines 12-14 is a template for javadoc (line 13 is so complicated to remove
 conflict with and of javadoc comment). Lines 7, 9 and 11 will be treated
 as '^$' and will forcefully expect the line to be empty.
 </p><p>
 Different programming languages have different comment syntax rules,
 but all of them start a comment with a non-word character.
 Hence you can often use the non-word character class to abstract away
 the concrete comment syntax and allow checking the header for different
 languages with a single header definition. For example, consider the following
 header specification (note that this is not the full Apache license header):
 </p><p>
 Lines 1 and 2 leave room for technical header lines, e.g. the "#!/bin/sh"
 line in Unix shell scripts, or the XML file header of XML files.
 Set the multiline property to "1, 2" so these lines can be ignored for
 file types where they do no apply. Lines 3 through 6 define the actual header content.
 Note how lines 2, 4 and 5 use escapes for characters that have special regexp semantics.
 </p><p>
 In default configuration, if header is not specified, the default value
 of header is set to null and the check does not rise any violations.
 </p>]]></description>
      <properties>
        <property name="headerFile" type="java.net.URI" default-value="null">
          <description><![CDATA[Specify the name of the file containing the required header.]]></description>
        </property>
        <property name="charset" type="java.lang.String" default-value="the charset property of the parent">
          <description><![CDATA[Specify the character encoding to use when reading the headerFile.]]></description>
        </property>
        <property name="header" type="\n" default-value="\n\n">
          <description><![CDATA[Define the required header specified inline.
 Individual header lines must be separated by the string {@code "\n"}
 (even on platforms with a different line separator).
 For header lines containing {@code "\n\n"} checkstyle will
 forcefully expect an empty line to exist. See examples below.
 Regular expressions must not span multiple lines.]]></description>
        </property>
        <property name="multiLines" type="int[]" default-value="{}">
          <description><![CDATA[Specify the line numbers to repeat (zero or more times).]]></description>
        </property>
        <property name="fileExtensions" type="java.lang.String[]" default-value="all files">
          <description><![CDATA[Specify the file type extension of files to process.]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="header.mismatch"/>
        <message-key key="header.missing"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
