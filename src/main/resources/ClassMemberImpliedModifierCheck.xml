<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="ClassMemberImpliedModifierCheck" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.modifier.ClassMemberImpliedModifierCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Checks for implicit modifiers on nested types in classes.
 </p><p>
 This check is effectively the opposite of
 <a href="https://checkstyle.org/config_modifier.html#RedundantModifier">RedundantModifier</a>.
 It checks the modifiers on nested types in classes, ensuring that certain modifiers are
 explicitly specified even though they are actually redundant.
 </p><p>
 Nested enums and interfaces within a class are always {@code static} and as such the compiler
 does not require the {@code static} modifier. This check provides the ability to enforce that
 the {@code static} modifier is explicitly coded and not implicitly added by the compiler.
 </p><p>
 Rationale for this check: Nested enums and interfaces are treated differently from nested
 classes as they are only allowed to be {@code static}. Developers should not need to remember
 this rule, and this check provides the means to enforce that the modifier is coded explicitly.
 </p>]]></description>
      <properties>
        <property name="violateImpliedStaticOnNestedEnum" type="static" default-value="boolean">
          <description><![CDATA[Control whether to enforce that
 {@code static} is explicitly coded on nested enums in classes.]]></description>
        </property>
        <property name="violateImpliedStaticOnNestedInterface" type="static" default-value="boolean">
          <description><![CDATA[Control whether to enforce that
 {@code static} is explicitly coded on nested interfaces in classes.]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="class.implied.modifier"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
