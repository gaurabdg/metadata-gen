<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="RedundantModifierCheck" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Checks for redundant modifiers.
 </p><p>
 Rationale: The Java Language Specification strongly discourages the usage
 of {@code public} and {@code abstract} for method declarations in interface
 definitions as a matter of style.
 </p><p>The check validates:</p><p>
 Interfaces by definition are abstract so the {@code abstract}
 modifier on the interface is redundant.
 </p><p>Classes inside of interfaces by definition are public and static,
 so the {@code public} and {@code static} modifiers
 on the inner classes are redundant. On the other hand, classes
 inside of interfaces can be abstract or non abstract.
 So, {@code abstract} modifier is allowed.
 </p><p>Fields in interfaces and annotations are automatically
 public, static and final, so these modifiers are redundant as
 well.</p><p>As annotations are a form of interface, their fields are also
 automatically public, static and final just as their
 annotation fields are automatically public and abstract.</p><p>Enums by definition are static implicit subclasses of java.lang.Enum&#60;E&#62;.
 So, the {@code static} modifier on the enums is redundant. In addition,
 if enum is inside of interface, {@code public} modifier is also redundant.</p><p>Enums can also contain abstract methods and methods which can be overridden by the declared
 enumeration fields.
 See the following example:</p><p>Since these methods can be overridden in these situations, the final methods are not
 marked as redundant even though they can't be extended by other classes/enums.</p><p>
 Nested {@code enum} types are always static by default.
 </p><p>Final classes by definition cannot be extended so the {@code final}
 modifier on the method of a final class is redundant.
 </p><p>Public modifier for constructors in non-public non-protected classes
 is always obsolete: </p><p>There is no violation in the following example,
 because removing public modifier from ProtectedInnerClass
 constructor will make this code not compiling: </p>]]></description>
      <properties>
        <property name="tokens" type="int[]" default-value="METHOD_DEF,VARIABLE_DEF,ANNOTATION_FIELD_DEF,INTERFACE_DEF,CTOR_DEF,CLASS_DEF,ENUM_DEF,RESOURCE">
          <description><![CDATA[tokens to check]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="redundantModifier"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
